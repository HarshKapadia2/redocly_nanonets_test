openapi: 3.1.0
info:
    title: NanoNets
    description: NanoNets' API Reference.
    contact:
        name: NanoNets Support
        url: https://nanonets.com
        email: support@nanonets.com
    license:
        name: MIT
        url: https://mit-license.org
    version: 2.0.0
    x-logo:
        url: https://nanonets.com/logo2.png
        altText: NanoNets
servers:
    - url: https://app.nanonets.com/api/v2
      description: "test"
paths:
    /OCR/Model/{model_id}:
        get:
            tags:
                - Optical Character Recognition Model Details
            summary: Get Model Details by ID
            description: Retrieve a specific model's details given its ID.
            operationId: ocr/model/id
            parameters:
                - $ref: "#/components/parameters/model_id"
            responses:
                "200":
                    description: Request successful.
                    content:
                        application/json:
                            schema:
                                type: object
                            examples:
                                OK:
                                    summary: Request successful
                                    description: >
                                        200 OK: Request successful
                                    value:
                                        model_id: 00000000-0000-0000-0000-000000000000
                                        model_type: ocr
                                        state: 0
                                        categories:
                                            - name: category1
                                              count: 0
                                            - name: category2
                                              count: 0
                    x-summary: OK
                "401":
                    $ref: "#/components/responses/UNAUTHORIZED"
                "402":
                    $ref: "#/components/responses/PAYMENT REQUIRED"
    /OCR/Model/{model_id}/UploadUrls:
        post:
            tags:
                - Optical Character Recognition Upload
            summary: Upload Training Images by URL
            description: |
                Upload training images to a model using image URLs.
                Multiple images can be uploaded in the same request by adding more URLs in the `urls` array.
                On successful upload, model information along with the total number of images per category will be received.
            operationId: ocr/upload/url
            parameters:
                - $ref: "#/components/parameters/Content-Type"
                - $ref: "#/components/parameters/model_id"
            requestBody:
                description: The parameters to be sent in the request's body.
                content:
                    application/json:
                        schema:
                            required:
                                - urls
                            properties:
                                urls:
                                    type: array
                                    items:
                                        type: string
                                    description: |
                                        Array of URL(s) of the training file(s).
                                        <br />
                                        **Format**: PNG, JPEG and/or PDF
                required: true
            responses:
                "200":
                    $ref: "#/components/responses/OK"
                "202":
                    description: |
                        Request partially successful.
                        <br />
                        <br />
                        One or more URLs
                        - Might not be correct
                        - Might be of the wrong file format
                        - Got no response
                    x-summary: ACCEPTED (Partially successful)
                "400":
                    description: URL(s) missing. Check if an array of file URLs has been included in the request.
                    x-summary: BAD REQUEST
                "401":
                    $ref: "#/components/responses/UNAUTHORIZED"
                "402":
                    $ref: "#/components/responses/PAYMENT REQUIRED"
                "404":
                    $ref: "#/components/responses/NOT FOUND"
            deprecated: false
            x-codeSamples:
                - lang: JavaScript
                  label: Node.js
                  source: >
                      var request = require('request')

                      const form_data = {"data": [{"filename":"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg", "object": [{"name":"category1", "ocr_text":"text inside the bounding box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}, {"name":"category2", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}]}], "urls": ["https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg"]}

                      const options = {
                          url : 'https://app.nanonets.com/api/v2/OCR/Model/{model_id}/UploadUrls/',
                          body: JSON.stringify(form_data),
                          headers: {
                              'Authorization' : 'Basic ' + Buffer.from('[[.ApiKey]]' + ':').toString('base64'),
                              'Content-Type': "application/json"
                          }
                      }

                      request.post(options, function(err, httpResponse, body) {

                        console.log(body)
                      });
                - lang: Python
                  label: Python
                  source: |
                      import requests

                      url = "https://app.nanonets.com/api/v2/OCR/Model/{model_id}/UploadUrls/"

                      payload = "{\"data\": [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}, {\"name\":\"category2\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\": [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}"
                      headers = {
                          'Content-Type': "application/json"
                      }

                      response = requests.request("POST", url, auth=requests.auth.HTTPBasicAuth('[[.ApiKey]]', ''), data=payload, headers=headers)

                      print(response.text)
                - lang: Shell
                  label: CLI
                  source: |
                      curl --request POST \
                          --url https://app.nanonets.com/api/v2/OCR/Model/{model_id}/UploadUrls/ \
                          -u '[[.ApiKey]]' \
                          -H 'Content-Type: application/json' \
                          --data '{"data": [{"filename":"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg", "object": [{"name":"category1", "ocr_text":"text inside the bounding box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}, {"name":"category2", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}]}], "urls": ["https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg"]}'
                - lang: Go
                  label: Go
                  source: |
                      package main

                      import (
                          "fmt"
                          "io/ioutil"
                          "net/http"
                          "strings"
                      )

                      func main() {

                          url := "https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/"

                          payload := strings.NewReader("{\"data\": [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}, {\"name\":\"category2\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\": [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}")

                          req, _ := http.NewRequest("POST", url, payload)

                          req.Header.Add("Content-Type", "application/json")
                          req.SetBasicAuth("[[.ApiKey]]", "")

                          res, _ := http.DefaultClient.Do(req)

                          defer res.Body.Close()
                          body, _ := ioutil.ReadAll(res.Body)

                          fmt.Println(res)
                          fmt.Println(string(body))

                      }
                - lang: Ruby
                  label: Ruby
                  source: |
                      require 'uri'
                      require 'net/http'

                      url = URI("https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/")

                      http = Net::HTTP.new(url.host, url.port)
                      http.use_ssl = true

                      request = Net::HTTP::Post.new(url)
                      request["Content-Type"] = 'application/json'
                      request.basic_auth '[[.ApiKey]]', ''
                      request.body = "{\"data\": [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}, {\"name\":\"category2\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\": [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}"

                      response = http.request(request)
                      puts response.read_body"
                - lang: C#
                  label: C#
                  source: >
                      var client = new
                      RestClient("https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/");

                      var request = new RestRequest(Method.POST);

                      request.AddHeader("authorization", "Basic [[.ApiKey]]");

                      request.AddHeader("Content-Type", "application/json");

                      request.AddParameter("undefined", "
                      {"data": [{"filename":"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg", "object":
                      [{"name":"category1", "ocr_text": "text inside the bounding box", "bndbox": {"xmin": 1,"ymin":
                      1,"xmax": 100, "ymax": 100}}, {"name":"category2", "ocr_text": "text inside the bounding box",
                      "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax":
                      100}}]}], "urls": ["https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg"]}",
                      ParameterType.RequestBody);

                      IRestResponse response = client.Execute(request);
                - lang: Java
                  label: Java
                  source: >-
                      OkHttpClient client = new OkHttpClient();


                      MediaType mediaType =
                      MediaType.parse("application/json");

                      RequestBody body = RequestBody.create(mediaType, "

                      {"data": [{"filename":"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg", "object":
                      [{"name":"category1", "ocr_text": "text inside the bounding box", "bndbox": {"xmin": 1,"ymin":
                      1,"xmax": 100, "ymax": 100}}, {"name":"category2", "ocr_text": "text inside the bounding box",
                      "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax":
                      100}}]}], "urls": ["https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg"]}");

                      Request request = new Request.Builder()
                        .url("https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/")
                        .post(body)
                        .addHeader("Content-Type", "application/json")
                        .addHeader("Authorization", Credentials.basic("[[.ApiKey]]", ""))
                        .build();

                      Response response = client.newCall(request).execute();
    /OCR/Model/{model_id}/UploadFile:
        post:
            tags:
                - Optical Character Recognition Upload
            summary: Upload Training Images by File
            description: |
                Upload a training image to the specified model using a locally stored file.
                On successful upload, model information along with the total number of images per category will be received.
                <br />
                <br />
                **NOTE**: Batch file uploads are not supported by this end point.
            operationId: ocr/upload/file
            parameters:
                - $ref: "#/components/parameters/model_id"
            requestBody:
                description: The parameters to be sent in the request's body.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - data
                                - file
                            properties:
                                data:
                                    type: string
                                    description: |
                                        The name of the file to be uploaded.
                                        <br />
                                        **Format**: `"data": "[{"filename": "filename.ext"}]"`.
                                        <br />
                                        **NOTE**: The `filename` must be the same as the uploaded file name.
                                file:
                                    type: string
                                    format: binary
                                    description: |
                                        The file to be uploaded.
                                        <br />
                                        **Format**: PNG, JPEG or PDF
                        encoding:
                            file:
                                contentType: image/png, image/jpeg, application/pdf
                required: true
            responses:
                "200":
                    $ref: "#/components/responses/OK"
                "400":
                    description: |
                        - File missing. Check if the file has been included in the request.
                        - Incorrect file type. Check if file you included is a valid PNG, JPEG or PDF file.
                    x-summary: BAD REQUEST
                "401":
                    $ref: "#/components/responses/UNAUTHORIZED"
                "402":
                    $ref: "#/components/responses/PAYMENT REQUIRED"
                "404":
                    $ref: "#/components/responses/NOT FOUND"
            deprecated: false
            x-codeSamples:
                - lang: JavaScript
                  label: Node.js
                  source: >
                      var request = require('request')

                      var fs = require('fs')

                      const form_data = {'file' : fs.createReadStream('REPLACE_IMAGE_PATH.jpg'), 'data' : JSON.stringify([
                        {"filename":"REPLACE_IMAGE_FILENAME.jpg", "object":[{"name":"category1", "ocr_text":"text inside the bounding box", "bndbox": {"xmin": 1,"ymin":1,"xmax": 100, "ymax": 100}}]}])}

                      const options = {
                          url : 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/',
                          formData: form_data,
                          headers: {
                              'Authorization' : 'Basic ' + Buffer.from('[[.ApiKey]]' + ':').toString('base64')
                          }
                      }

                      request.post(options, function(err, httpResponse, body) {

                        console.log(body)
                      });
                - lang: Python
                  label: Python
                  source: >-
                      import requests


                      url = 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/'


                      data = {'file' :open('REPLACE_IMAGE_PATH.jpg', 'rb'), 'data' :('',
                      '[{"filename":"REPLACE_IMAGE_FILENAME.jpg", "object":
                      [{"name":"category1", "ocr_text":"text inside the bounding box", "bndbox": {"xmin": 1,"ymin":
                      1,"xmax": 100, "ymax": 100}}]}]')}


                      response = requests.post(url, auth=requests.auth.HTTPBasicAuth('[[.ApiKey]]', ''), files=data)


                      print(response.text)
                - lang: Shell
                  label: CLI
                  source: |
                      curl --request POST \
                          --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/' \
                          --header 'accept: multipart/form-data' \
                          -u '[[.ApiKey]]' \
                          -F 'data=[{"filename":"REPLACE_IMAGE_FILENAME.jpg", "object": [{"name":"category1", "ocr_text":"text inside the bounding box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}]}]' \
                          -F 'file=@REPLACE_IMAGE_PATH.jpg'
                - lang: Go
                  label: Go
                  source: |
                      package main

                      import (
                          "bytes"
                          "fmt"
                          "io"
                          "io/ioutil"
                          "mime/multipart"
                          "net/http"
                          "os"
                          "path/filepath"
                      )

                      func main() {

                          url := "https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/"

                          file, err := os.Open("test.jpg")
                          if err != nil {
                              fmt.Println(err)
                              return
                          }

                          defer file.Close()

                          body := &bytes.Buffer{}
                          writer := multipart.NewWriter(body)

                          part, err := writer.CreateFormFile("file", filepath.Base("test.jpg"))
                          if err != nil {
                              fmt.Println(err)
                              return
                          }
                          _, err = io.Copy(part, file)

                          writer.WriteField("data", `[{"filename":"REPLACE_IMAGE_FILENAME.jpg", "object": [{"name":"category1", "ocr_text":"text inside the bounding box", "bndbox": {"xmin": 1,"ymin": 1,"xmax": 100, "ymax": 100}}]}]`)
                          contentType := writer.FormDataContentType()

                          err = writer.Close()
                          if err != nil {
                              fmt.Println(err)
                              return
                          }

                          req, _ := http.NewRequest("POST", url, body)

                          req.Header.Add("Content-Type", contentType)
                          req.SetBasicAuth("[[.ApiKey]]", "")

                          res, _ := http.DefaultClient.Do(req)

                          defer res.Body.Close()
                          outputBody, _ := ioutil.ReadAll(res.Body)

                          fmt.Println(res)
                          fmt.Println(string(outputBody))

                      }
                - lang: Ruby
                  label: Ruby
                  source: |
                      require 'uri'
                      require 'net/http'
                      require 'net/http/post/multipart'

                      url = URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/')

                      http = Net::HTTP.new(url.host, url.port)
                      http.use_ssl = true

                      File.open('REPLACE_IMAGE_PATH.jpg') do |jpg|
                        request = Net::HTTP::Post::Multipart.new url.path,
                            'file' => UploadIO.new(jpg, 'image/jpeg', 'REPLACE_IMAGE_PATH.jpg'),
                            'data' => '[{"filename":"REPLACE_IMAGE_FILENAME.jpg", "object":[{"name":"category1", "ocr_text":"text inside the bounding box", "bndbox":{"xmin":1,"ymin":1,"xmax":100, "ymax":100}}]}]'
                        request.basic_auth '[[.ApiKey]]', ''
                        response = Net::HTTP.start(url.host, url.port) do |http|
                            http.request(request)
                        end
                        puts response.read_body
                      end
                - lang: C#
                  label: C#
                  source: |
                      var client = new RestClient("https://app.nanonets.com/api/v2/OCR/UploadFile/");
                      var request = new RestRequest(Method.POST);
                      request.AddHeader("authorization", "Basic [[.ApiKey]]");
                      request.AddHeader("accept", "Multipart/form-data");
                      request.AddParameter("data", "[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}]");
                      request.AddFile("file", "REPLACE_IMAGE_PATH.jpg");
                      IRestResponse response = client.Execute(request);"
                - lang: Java
                  label: Java
                  source: |
                      private static final MediaType MEDIA_TYPE_JPG = MediaType.parse("image/jpeg");

                      OkHttpClient client = new OkHttpClient();

                      RequestBody requestBody = new MultipartBody.Builder()
                              .setType(MultipartBody.FORM)
                              .addFormDataPart("data", "[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}]")
                              .addFormDataPart("file", "REPLACE_IMAGE_PATH.jpg", RequestBody.create(MEDIA_TYPE_JPG, new File("REPLACE_IMAGE_PATH.jpg")))
                              .build();

                      request = new Request.Builder()
                              .url("https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/")
                              .post(requestBody)
                              .addHeader("Authorization", Credentials.basic("[[.ApiKey]]", ""))
                              .build();

                      Response response = client.newCall(request).execute();"
    /OCR/Model/{model_id}/Train:
        post:
            tags:
                - Optical Character Recognition Train
            summary: Train Model
            description: |
                Train a model after uploading files to the model.
                The same end point is to be used to re-train a model after uploading more files to improve the model.
            operationId: ocr/train
            parameters:
                - $ref: "#/components/parameters/model_id"
            responses:
                "200":
                    description: Request successful.
                    content:
                        application/json:
                            schema:
                                type: object
                            examples:
                                OK:
                                    summary: Request successful
                                    description: >
                                        200 OK: Request successful
                                    value:
                                        model_id: 00000000-0000-0000-0000-000000000000
                                        model_type: ocr
                                        state: 0
                                        categories:
                                            - name: category1
                                              count: 0
                                            - name: category2
                                              count: 0
                    x-summary: OK
                "400":
                    description: Model not ready for training. Check if the files for the model are uploaded.
                    x-summary: BAD REQUEST
                "401":
                    $ref: "#/components/responses/UNAUTHORIZED"
                "402":
                    $ref: "#/components/responses/PAYMENT REQUIRED"
                "404":
                    $ref: "#/components/responses/NOT FOUND"
    /Inferences/Model/{model_id}/ImageLevelInferences:
        get:
            tags:
                - Optical Character Recognition Predict
            summary: Get All Prediction Files
            description: Retrieve the files that have been processed by the prediction end points.
            operationId: ocr/predict/getfile
            parameters:
                - $ref: "#/components/parameters/model_id"
                - name: start_day_interval
                  in: query
                  description: |
                      The start of the interval for which prediction files are needed.
                      <br />
                      **Format**: Number of days since [Unix epoch time](https://www.epochconverter.com)
                      <br />
                      **Eg**: 1620130500 seconds / 86400 seconds per day ~ `18,751` days
                  required: true
                  schema:
                      type: integer
                - name: current_batch_day
                  in: query
                  description: |
                      The end of the interval for which prediction files are needed.
                      <br />
                      **Format**: Number of days since [Unix epoch time](https://www.epochconverter.com)
                      <br />
                      **Eg**: 1630930872 seconds / 86400 seconds per day ~ `18,876` days
                      <br />
                      **NOTE**: The value of this parameter has to be greater than the value of the `start_day_interval` parameter.
                  required: true
                  schema:
                      type: integer
            responses:
                "200":
                    description: Image object.
                    content:
                        application/json:
                            schema:
                                type: object
                            examples:
                                OK:
                                    summary: Request successful.
                                    description: >
                                        200 OK: Request successful
                                    value:
                                        moderated_images_count: 55
                                        unmoderated_images_count: 156
                                        moderated_images:
                                            - model_id: category1
                                              day_since_epoch: 18564
                                              is_moderated: true
                                              hour_of_day: 15
                                              id: 00000000-0000-0000-0000-000000000000
                                              url: uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/0000000001.jpeg
                                              predicted_boxes:
                                                  - label: invoice_id
                                                    xmin: 616
                                                    ymin: 321
                                                    xmax: 984
                                                    ymax: 357
                                                    ocr_text: "877541"
                                        unmoderated_images:
                                            - model_id: 00000000-0000-0000-0000-000000000000
                                              day_since_epoch: 18565
                                              is_moderated: false
                                              hour_of_day: 23
                                              id: 00000000-0000-0000-0000-000000000000
                                              url: uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/0000000002.jpeg
                                              predicted_boxes:
                                                  - label: seller_name
                                                    xmin: 616
                                                    ymin: 321
                                                    xmax: 984
                                                    ymax: 357
                                                    ocr_text: "Apple"
                    x-summary: OK
                "401":
                    $ref: "#/components/responses/UNAUTHORIZED"
                "402":
                    $ref: "#/components/responses/PAYMENT REQUIRED"
                "404":
                    $ref: "#/components/responses/NOT FOUND"
            deprecated: false
            x-codeSamples:
                - lang: JavaScript
                  label: Node.js
                  source: >
                      var request = require('request')

                      const options = {
                          url : 'https://app.nanonets.com/api/v2/Inferences/Model/' + 'REPLACE_MODEL_ID' + '/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}',
                          headers: {
                              'Authorization' : 'Basic ' + Buffer.from('[[.ApiKey]]' + ':').toString('base64')
                          }
                      }

                      request.get(options, function(err, httpResponse, body) {

                        console.log(body)
                      });
                - lang: Python
                  label: Python
                  source: >-
                      import requests


                      url = 'https://app.nanonets.com/api/v2/Inferences/Model/' + 'REPLACE_MODEL_ID' + '/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}'


                      response = requests.request('GET', url,
                      auth=requests.auth.HTTPBasicAuth('[[.ApiKey]]',''))


                      print(response.text)
                - lang: Shell
                  label: CLI
                  source: |-
                      curl --request GET \
                        --url 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}' \
                        -u '[[.ApiKey]]'
                - lang: Go
                  label: Go
                  source: |-
                      package main

                      import (
                          "fmt"
                          "net/http"
                          "io/ioutil"
                      )

                      func main() {

                          url := "https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}"

                          req, _ := http.NewRequest("GET", url, nil)

                          req.SetBasicAuth("[[.ApiKey]]", "")

                          res, _ := http.DefaultClient.Do(req)

                          defer res.Body.Close()
                          body, _ := ioutil.ReadAll(res.Body)

                          fmt.Println(res)
                          fmt.Println(string(body))

                      }
                - lang: Ruby
                  label: Ruby
                  source: >-
                      require 'uri'
                      require 'net/http'

                      url = URI("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}")

                      http = Net::HTTP.new(url.host, url.port)
                      http.use_ssl = true

                      request = Net::HTTP::Get.new(url)
                      request.basic_auth '[[.ApiKey]]', ''
                      response = http.request(request)

                      puts response.read_body
                - lang: C#
                  label: C#
                  source: >-
                      var client = new RestClient("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}");

                      var request = new RestRequest(Method.GET);

                      request.AddHeader("authorization", "Basic " + Convert.ToBase64String(Encoding.Default.GetBytes("[[.ApiKey]]:")));

                      IRestResponse response = client.Execute(request);
                - lang: Java
                  label: Java
                  source: |-
                      OkHttpClient client = new OkHttpClient();

                      Request request = new Request.Builder()
                        .url("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}")
                        .get()
                        .addHeader("authorization", Credentials.basic("[[.ApiKey]]", ""))
                        .build();

                      Response response = client.newCall(request).execute();
    /Inferences/Model/{model_id}/ImageLevelInferences/{id}:
        get:
            tags:
                - Optical Character Recognition Predict
            summary: Get Prediction File by ID
            description: Retrieve the prediction results of a particular file by its ID.
            operationId: ocr/predict/id
            parameters:
                - $ref: "#/components/parameters/model_id"
                - name: id
                  in: path
                  description: |
                      The ID of the file for which the prediction has to be retrieved.
                      <br />
                      **Eg**: `0a0aa000-0000-0a0-aa00-000a0000000a`
                  required: true
                  schema:
                      type: string
                      nullable: false
            responses:
                "200":
                    $ref: "#/components/responses/OK prediction"
                "401":
                    $ref: "#/components/responses/UNAUTHORIZED"
                "402":
                    $ref: "#/components/responses/PAYMENT REQUIRED"
                "404":
                    $ref: "#/components/responses/NOT FOUND"
            deprecated: false
            x-codeSamples:
                - lang: JavaScript
                  label: Node.js
                  source: >
                      var request = require('request')

                      const options = {
                          url : 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}',
                          headers: {
                              'Authorization' : 'Basic ' + Buffer.from('[[.ApiKey]]' + ':').toString('base64')
                          }
                      }

                      request.get(options, function(err, httpResponse, body) {

                        console.log(body)
                      });
                - lang: Python
                  label: Python
                  source: >-
                      import requests


                      url = 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}'


                      response = requests.request('GET', url,
                      auth=requests.auth.HTTPBasicAuth('[[.ApiKey]]',''))


                      print(response.text)
                - lang: Shell
                  label: CLI
                  source: |-
                      curl --request GET \
                        --url 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}' \
                        -u '[[.ApiKey]]'
                - lang: Go
                  label: Go
                  source: |-
                      package main

                      import (
                          "fmt"
                          "net/http"
                          "io/ioutil"
                      )

                      func main() {

                          url := "https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}"

                          req, _ := http.NewRequest("GET", url, nil)

                          req.SetBasicAuth("[[.ApiKey]]", "")

                          res, _ := http.DefaultClient.Do(req)

                          defer res.Body.Close()
                          body, _ := ioutil.ReadAll(res.Body)

                          fmt.Println(res)
                          fmt.Println(string(body))

                      }
                - lang: Ruby
                  label: Ruby
                  source: >-
                      require 'uri'
                      require 'net/http'

                      url = URI("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}")

                      http = Net::HTTP.new(url.host, url.port)
                      http.use_ssl = true

                      request = Net::HTTP::Get.new(url)
                      request.basic_auth '[[.ApiKey]]', ''
                      response = http.request(request)

                      puts response.read_body
                - lang: C#
                  label: C#
                  source: >-
                      var client = new RestClient("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}");

                      var request = new RestRequest(Method.GET);

                      request.AddHeader("authorization", "Basic " + Convert.ToBase64String(Encoding.Default.GetBytes("[[.ApiKey]]:")));

                      IRestResponse response = client.Execute(request);
                - lang: Java
                  label: Java
                  source: |-
                      OkHttpClient client = new OkHttpClient();

                      Request request = new Request.Builder()
                        .url("https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}")
                        .get()
                        .addHeader("authorization", Credentials.basic("[[.ApiKey]]", ""))
                        .build();

                      Response response = client.newCall(request).execute();
    /OCR/Model/{model_id}/LabelFile:
        post:
            tags:
                - Optical Character Recognition Predict
            summary: Prediction for Image Files
            description: Given an image file, predict the label(s) to which the file belongs.
            operationId: ocr/predict/file
            parameters:
                - $ref: "#/components/parameters/model_id"
            requestBody:
                description: The parameters to be sent in the request's body.
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - file
                            properties:
                                file:
                                    type: string
                                    format: binary
                                    description: |
                                        The file to be uploaded.
                                        <br />
                                        **Format**: PNG, JPEG or PDF
                        encoding:
                            file:
                                contentType: image/png, image/jpeg, application/pdf
                required: true
            responses:
                "200":
                    $ref: "#/components/responses/OK prediction"
                "400":
                    description: |
                        - File missing. Check if a file has been included in the request.
                        - Incorrect uploaded file. Check if the included file is a valid PNG, JPEG or PDF.
                    x-summary: BAD REQUEST
                "401":
                    $ref: "#/components/responses/UNAUTHORIZED"
                "402":
                    $ref: "#/components/responses/PAYMENT REQUIRED"
                "404":
                    $ref: "#/components/responses/NOT FOUND"
components:
    responses:
        OK:
            description: Request successful.
            content:
                application/json:
                    schema:
                        type: object
                    examples:
                        OK:
                            summary: Request successful
                            description: >
                                200 OK: Request successful
                            value:
                                Meta:
                                    ModelID: 00000000-0000-0000-0000-000000000000
                                    ModelType: ocr
                                    State: 0
                                    Categories:
                                        - name: category1
                                          count: 0
                                        - name: category2
                                          count: 0
                                    Accuracy: 0
                                    Status: Current Status
                                Data:
                                    - filename: example.jpeg
                                      size:
                                          width: 1024
                                          height: 1024
                                      object:
                                          - name: category1
                                            ocr_text: text inside the bounding box
                                            bndbox:
                                                xmin: 1
                                                ymin: 1
                                                xmax: 100
                                                ymax: 100
                                      id: 00000000-0000-0000-0000-000000000000
            x-summary: OK
        OK prediction:
            description: Request successful.
            content:
                application/json:
                    schema:
                        type: object
                    examples:
                        OK:
                            summary: Prediction object.
                            description: >
                                200 OK: Request successful
                            value:
                                message: Success
                                result:
                                    - message: Success
                                      input: string
                                      prediction:
                                          - label: category1
                                            xmin: 0
                                            ymin: 0
                                            xmax: 100
                                            ymax: 100
                                            score: 0.9
                                            ocr_text: string
                                          - label: ""
                                            ocr_text: table 1
                                            type: table
                                            score: 99.99
                                            xmin: 159
                                            xmax: 380
                                            ymin: 1258
                                            ymax: 1439
                                            cells:
                                                - row: 1
                                                  col: 1
                                                  row_span: 1
                                                  col_span: 1
                                                  label: col 1
                                                  xmin: 159
                                                  ymin: 1258
                                                  xmax: 258
                                                  ymax: 1357
                                                  score: 99.99
                                                  text: ocr text 1
                                                - row: 1
                                                  col: 2
                                                  row_span: 1
                                                  col_span: 1
                                                  label: col 2
                                                  xmin: 258
                                                  ymin: 1258
                                                  xmax: 380
                                                  ymax: 1357
                                                  score: 99.99
                                                  text: ocr text 2
                                                - row: 2
                                                  col: 1
                                                  row_span: 1
                                                  col_span: 1
                                                  label: col 1
                                                  xmin: 159
                                                  ymin: 1357
                                                  xmax: 258
                                                  ymax: 1439
                                                  score: 99.99
                                                  text: ocr text 3
                                                - row: 2
                                                  col: 2
                                                  row_span: 1
                                                  col_span: 1
                                                  label: col 2
                                                  xmin: 258
                                                  ymin: 1357
                                                  xmax: 380
                                                  ymax: 1439
                                                  score: 99.99902
                                                  text: ocr text 4
            x-summary: OK
        UNAUTHORIZED:
            description: |
                Request authorization unsuccessful.
                <br />
                - Please use a valid API key.
                - Please check HTTP Basic Authorization Scheme format.
            x-summary: UNAUTHORIZED
        PAYMENT REQUIRED:
            description: |
                Free API call limit for the month has been exhausted.
                Please change your plan.
            x-summary: PAYMENT REQUIRED
        NOT FOUND:
            description: Model does not exist. Check if the model ID is correct.
            x-summary: NOT FOUND
    parameters:
        Content-Type:
            name: Content-Type
            in: header
            description: |
                Set the ['Content-Type' header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) value.
                <br />
                **Eg**: `"Content-Type": "application/json"`
            required: true
            schema:
                type: string
        model_id:
            name: model_id
            in: path
            description: |
                The ID of the model on which the operation is to be performed. It can be found in the model settings.
                <br />
                **Eg**: `0a0aa000-0000-0a0-aa00-000a0000000a`
            required: true
            schema:
                type: string
    securitySchemes:
        API Key:
            type: http
            description: >
                When you sign up for an account, you are given your first API key.
                To do so please [follow this link.](https://app.nanonets.com/#keys)


                Also you can generate additional API keys, and delete API keys (as you may need to rotate your keys in the future).
                NanoNets expects for the API key to be included in all API requests to the server in a header that looks like the following:


                <span style="color:red">Authorization: [[.ApiKey]]</span>


                All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.
            scheme: Basic
security:
    - API Key: []
tags:
    - name: Optical Character Recognition Model Details
      description: "test"
      x-displayName: Model Details
    - name: Optical Character Recognition Upload
      description: "test"
      x-displayName: Upload
    - name: Optical Character Recognition Train
      description: "test"
      x-displayName: Train
    - name: Optical Character Recognition Predict
      description: "test"
      x-displayName: Predict
    - name: Image Classification Model Details
      description: "test"
      x-displayName: Model Details
    - name: Image Classification Upload
      description: "test"
      x-displayName: Upload
    - name: Image Classification Train
      description: "test"
      x-displayName: Train
    - name: Image Classification Predict
      description: "test"
      x-displayName: Predict
    - name: Object Detection Model Details
      description: "test"
      x-displayName: Model Details
    - name: Object Detection Upload
      description: "test"
      x-displayName: Upload
    - name: Object Detection Train
      description: "test"
      x-displayName: Train
    - name: Object Detection Predict
      description: "test"
      x-displayName: Predict
    - name: Multi Label Image Classification Model Details
      description: "test"
      x-displayName: Model Details
    - name: Multi Label Image Classification Upload
      description: "test"
      x-displayName: Upload
    - name: Multi Label Image Classification Train
      description: "test"
      x-displayName: Train
    - name: Multi Label Image Classification Predict
      description: "test"
      x-displayName: Predict
x-tagGroups:
    - name: Optical Character Recognition
      tags:
          - Optical Character Recognition Model Details
          - Optical Character Recognition Upload
          - Optical Character Recognition Train
          - Optical Character Recognition Predict
    - name: Image Classification
      tags:
          - Image Classification Model Details
          - Image Classification Upload
          - Image Classification Train
          - Image Classification Predict
    - name: Object Detection
      tags:
          - Object Detection Model Details
          - Object Detection Upload
          - Object Detection Train
          - Object Detection Predict
    - name: Multi Label Image Classification
      tags:
          - Multi Label Image Classification Model Details
          - Multi Label Image Classification Upload
          - Multi Label Image Classification Train
          - Multi Label Image Classification Predict
